function Math.init 0
push constant 16
call Array.new 1
pop static 0
push constant 1
push constant 0
push static 0
add
pop pointer 1
pop that 0
push constant 2
push constant 1
push static 0
add
pop pointer 1
pop that 0
push constant 4
push constant 2
push static 0
add
pop pointer 1
pop that 0
push constant 8
push constant 3
push static 0
add
pop pointer 1
pop that 0
push constant 16
push constant 4
push static 0
add
pop pointer 1
pop that 0
push constant 32
push constant 5
push static 0
add
pop pointer 1
pop that 0
push constant 64
push constant 6
push static 0
add
pop pointer 1
pop that 0
push constant 128
push constant 7
push static 0
add
pop pointer 1
pop that 0
push constant 256
push constant 8
push static 0
add
pop pointer 1
pop that 0
push constant 512
push constant 9
push static 0
add
pop pointer 1
pop that 0
push constant 1024
push constant 10
push static 0
add
pop pointer 1
pop that 0
push constant 2048
push constant 11
push static 0
add
pop pointer 1
pop that 0
push constant 4096
push constant 12
push static 0
add
pop pointer 1
pop that 0
push constant 8192
push constant 13
push static 0
add
pop pointer 1
pop that 0
push constant 16384
push constant 14
push static 0
add
pop pointer 1
pop that 0
push constant 16384
push constant 16384
add
push constant 15
push static 0
add
pop pointer 1
pop that 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto IF_EXPR_1
push argument 0
neg
return
goto IF_END_1
label IF_EXPR_1
label IF_END_1
push argument 0
return
function Math.multiply 3
push constant 0
pop local 1
push argument 0
pop local 2
push constant 0
pop local 0
label WHILE_EXPR_2
push local 0
push constant 16
lt
not
if-goto WHILE_END_2
push argument 1
push local 0
call Math.getBit 2
not
if-goto IF_EXPR_3
push local 1
push local 2
add
pop local 1
goto IF_END_3
label IF_EXPR_3
label IF_END_3
push local 2
push local 2
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXPR_2
label WHILE_END_2
push local 1
return
function Math.divide 2
push argument 1
push constant 0
eq
not
if-goto IF_EXPR_4
push constant 1
call Sys.error 1
pop temp 0
goto IF_END_4
label IF_EXPR_4
label IF_END_4
push argument 0
push constant 0
lt
pop local 0
push argument 1
push constant 0
lt
pop local 1
push local 0
push local 1
eq
not
if-goto IF_EXPR_5
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.udivide 2
return
goto IF_END_5
label IF_EXPR_5
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.udivide 2
neg
return
label IF_END_5
function Math.udivide 1
push argument 1
push argument 0
gt
not
if-goto IF_EXPR_6
push constant 0
return
goto IF_END_6
label IF_EXPR_6
label IF_END_6
push argument 0
push argument 1
push argument 1
add
call Math.udivide 2
pop local 0
push argument 0
push local 0
push local 0
add
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto IF_EXPR_7
push local 0
push local 0
add
return
goto IF_END_7
label IF_EXPR_7
push local 0
push local 0
push constant 1
add
add
return
label IF_END_7
function Math.sqrt 4
push argument 0
push constant 0
eq
push argument 0
push constant 1
eq
or
not
if-goto IF_EXPR_8
push argument 0
return
goto IF_END_8
label IF_EXPR_8
label IF_END_8
push constant 1
pop local 0
push constant 182
pop local 1
label WHILE_EXPR_9
push local 0
push local 1
push constant 1
sub
lt
not
if-goto WHILE_END_9
push local 0
push local 1
add
push constant 2
call Math.divide 2
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
eq
not
if-goto IF_EXPR_10
push local 2
return
goto IF_END_10
label IF_EXPR_10
label IF_END_10
push local 3
push argument 0
gt
not
if-goto IF_EXPR_11
push local 2
pop local 1
goto IF_END_11
label IF_EXPR_11
push local 2
pop local 0
label IF_END_11
goto WHILE_EXPR_9
label WHILE_END_9
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto IF_EXPR_12
push argument 0
return
goto IF_END_12
label IF_EXPR_12
push argument 1
return
label IF_END_12
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto IF_EXPR_13
push argument 0
return
goto IF_END_13
label IF_EXPR_13
push argument 1
return
label IF_END_13
function Math.getBit 0
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return
function Math.setBit 0
push argument 2
not
if-goto IF_EXPR_14
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
or
return
goto IF_END_14
label IF_EXPR_14
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
not
and
return
label IF_END_14